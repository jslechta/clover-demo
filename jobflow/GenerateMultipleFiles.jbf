<?xml version="1.0" encoding="UTF-8"?>
<Graph author="JanSlechta" created="Wed Oct 02 14:14:10 CEST 2024" guiVersion="6.6.0.8" id="1727963804087" licenseCode="Unlicensed" name="GenerateMultipleFiles" nature="jobflow" showComponentDetails="true">
<Global>
<GraphParameters>
<GraphParameter label="Number of records to generate" name="NUM_OF_GENERATED_FILES" public="true" required="true" value="5">
<ComponentReference referencedComponent="DATA_GENERATOR" referencedProperty="recordsNumber"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Generate tokens" guiX="371" guiY="380" id="GENERATE_TOKENS" recordsNumber="${NUM_OF_GENERATED_FILES}" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Run XlsxGnerator" guiX="689" guiY="380" id="RUN_XLSX_GNERATOR" jobURL="${GRAPH_DIR}/XlsxGnerator.grf" type="EXECUTE_GRAPH"/>
<Edge fromNode="GENERATE_TOKENS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="RUN_XLSX_GNERATOR:0"/>
</Phase>
</Graph>
